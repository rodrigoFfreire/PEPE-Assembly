{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "PEPE Assembly",
	"scopeName": "source.asm",
	"fileTypes": ["asm"],
	"patterns": [
		{
		  "include": "#registers"
		},
		{
		  "include": "#mnemonics"
		},
		{
		  "include": "#constants"
		},
		{
		  "include": "#entities"
		},
		{
		  "include": "#comments"
		},
		{
		  "include": "#preprocessor"
		},
		{
		  "include": "#strings"
		}
	  ],
	"repository": {
		"registers": {
			"patterns": [
			  {
				"name": "constant.language.register.general-purpose.pepe-asm",
				"match": "(?i)\\bR([0-9]|1[0-5])\\b"
			  },
			  {
				"name": "constant.language.register.special.pepe-asm",
				"match": "(?i)\\b(PC|SP|RE|BTE|RL)\\b"
			  }
			]
		  },
		"constants": {
			"patterns": [
			  {
				"name": "constant.numeric.binary.pepe-asm",
				"match": "(?i)\\b[01]{0,16}b\\b"
			  },
			  {
				"name": "constant.numeric.decimal.pepe-asm",
				"match": "(\\b|-)[0-9]+d?\\b"
			  },
			  {
				"name": "constant.numeric.hex.pepe-asm",
				"match": "\\b([0-9][0-9a-f]{1,3}|0[a-f][0-9a-f]{1,3})h\\b"
			  }
			]
		},
		"mnemonics": {
			"patterns": [
			  {
				"name": "keyword.operator.word.mnemonic.general-purpose.data-transfer",
				"match": "(?i)\\b(mov|movb|movp)\\b"
			  },
			  {
				"name": "keyword.operator.word.mnemonic.general-purpose.binary-arithmetic",
				"match": "(?i)\\b(addc?|subb?|cmp|mul|div|mod|neg)\\b"
			  },
			  {
				"name": "keyword.operator.word.mnemonic.general-purpose.logical",
				"match": "(?i)\\b(and|x?or|not|test|bit)\\b"
			  },
			  {
				"name": "keyword.operator.word.mnemonic.general-purpose.interupts",
				"match": "(?i)\\b(EI|DI)[0-3]?\\b"
			  },
			  {
				"name": "keyword.operator.word.mnemonic.general-purpose.rotate",
				"match": "(?i)\\b(sh[rl]a?|ro[rl]c?)\\b"
			  },
			  {
				"name": "keyword.operator.word.mnemonic.general-purpose.bitwiseother",
				"match": "(?i)\\b(setc?|edma|clrc?|ddma|cplc?)\\b"
			  },
			  {
				"match": "(?i)\\b((j(nn?|n?z|n?p|n?c|n?v|n?a|eq|ne|l[t,e]|g[t,e]|mp))(\\.n?[zcnopi])?)(\\s+)(.?\\w+)\\b",
				"captures": {
				  "1": {
					"name": "keyword.control.mnemonic.jmp"
				  },
				  "5": {
					"name": "entity.name.function.pepe-asm"
				  }
				}
			  },
			  {
				"name": "keyword.control.mnemonic.other",
				"match": "(?i)\\b(retf?|callf?|rfe|nop|swe|push|pop|swap)\\b"
			  }
			]
		},
		"comments": {
			"patterns": [
			  {
				"name": "comment.line",
				"match": ";.*$"
			  }
			]
		},
		"preprocessor": {
			"patterns": [
			  {
				"name" : "meta.preprocessor.default.pepe-asm",
				"match": "(?i)\\b(equ|place)\\b",
				"captures": {
					"0": {
						"name": "meta.preprocessor"
					}
				}
			  },
			  {
				"name" : "meta.preprocessor.special.pepe-asm",
				"match": "(?i)\\b(word|byte|table|stack|process|yield|wait|lock)\\b",
				"captures": {
					"0" : {
						"name": "storage.modifier.memory-address"
					}
				}
			  }
			]
		},
		"strings": {
			"patterns": [
			  {
				"name": "string.quoted.single.pepe-asm",
				"begin": "'",
				"beginCaptures": {
				  "0": {
					"name": "punctuation.definition.string.begin.pepe-asm"
				  }
				},
				"end": "'",
				"endCaptures": {
				  "0": {
					"name": "punctuation.definition.string.end.pepe-asm"
				  }
				}
			  }
			]
		},
		"entities": {
			"patterns": [
				{
					"match": "(\\.\\.@)((?:[[:alpha:]_?](?:[[:alnum:]_$#@~.?]*)))(?:(\\:)?|\\b)",
					"name": "entity.name.function.pepe-asm",
					"captures": {
						"1": {
						"name": "punctuation.separator.pepe-asm storage.modifier.pepe-asm"
						},
						"2": {
						"name": "entity.name.function.special.pepe-asm"
						},
						"3": {
						"name": "punctuation.separator.pepe-asm"
						}
					}
					},
				{
					"match": "(?:(\\.)?|\\b)((?:[[:alpha:]_?](?:[[:alnum:]_$#@~.?]*)))(?:(\\:))",
					"name": "entity.name.function.pepe-asm",
					"captures": {
						"1": {
						"name": "punctuation.separator.pepe-asm storage.modifier.pepe-asm"
						},
						"2": {
						"name": "entity.name.function.pepe-asm"
						},
						"3": {
						"name": "punctuation.separator.pepe-asm"
						}
					}
					},
				{
					"match": "(\\.)([0-9]+(?:[[:alnum:]_$#@~.?]*))(?:(\\:)?|\\b)",
					"name": "entity.name.function.pepe-asm",
					"captures": {
						"1": {
						"name": "punctuation.separator.pepe-asm storage.modifier.pepe-asm"
						},
						"2": {
						"name": "entity.name.function.pepe-asm"
						},
						"3": {
						"name": "punctuation.separator.pepe-asm"
						}
					}
					},
				{
					"match": "(?:(\\.)?|\\b)([0-9$@~](?:[[:alnum:]_$#@~.?]*))(?:(\\:))",
					"name": "invalid.illegal.entity.name.function.pepe-asm",
					"captures": {
						"1": {
						"name": "punctuation.separator.pepe-asm storage.modifier.pepe-asm"
						},
						"2": {
						"name": "invalid.illegal.entity.name.function.pepe-asm"
						},
						"3": {
						"name": "punctuation.separator.pepe-asm"
						}
					}
				}
			]	
    	}
	}
}